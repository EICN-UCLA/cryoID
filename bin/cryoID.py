#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""
cryoID (cryoEM map identification) is a python-based program that determines the unique identity of the protein(s) in (near-) atomic resolution cryoEM density maps from a pool of 
candidates. It takes cryoID two sequencial steps to get the job done, with two subprograms called get_queries and search_pool respectively. This is cryoID Graphical User Interface (GUI). 

Author: Xiaorun Li (Lee) @ Prof. Hong Zhou lab
University of California, Los Angeles (UCLA) &
University of Science and Technology of China (USTC)

Version 1.0, released in 9/1/2019
"""

import sys, os, argparse
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QFileDialog

# GUI main window panel. Generated by Qt designer & PyQt5 UI code generator
class cryoID_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(931, 847)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("PT Sans Narrow")
        font.setPointSize(12)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("")
        MainWindow.setIconSize(QtCore.QSize(24, 24))
        MainWindow.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setStyleSheet("QPushButton { background-color: rgb(115, 210, 22) }")
        self.centralwidget.setObjectName("centralwidget")
        self.seqpooll = QtWidgets.QLabel(self.centralwidget)
        self.seqpooll.setGeometry(QtCore.QRect(220, 270, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(16)
        self.seqpooll.setFont(font)
        self.seqpooll.setAlignment(QtCore.Qt.AlignCenter)
        self.seqpooll.setObjectName("seqpooll")
        self.Infobox = QtWidgets.QTextEdit(self.centralwidget)
        self.Infobox.setGeometry(QtCore.QRect(10, 450, 911, 231))
        font = QtGui.QFont()
        font.setFamily("Cantarell")
        font.setPointSize(15)
        self.Infobox.setFont(font)
        self.Infobox.setObjectName("Infobox")
        self.query_inputl = QtWidgets.QLabel(self.centralwidget)
        self.query_inputl.setGeometry(QtCore.QRect(260, 220, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(16)
        self.query_inputl.setFont(font)
        self.query_inputl.setObjectName("query_inputl")
        self.SeqSearch = QtWidgets.QPushButton(self.centralwidget)
        self.SeqSearch.setGeometry(QtCore.QRect(30, 280, 181, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(18)
        self.SeqSearch.setFont(font)
        self.SeqSearch.setStyleSheet("background-color: rgb(115, 210, 22);")
        self.SeqSearch.setObjectName("SeqSearch")
        self.query_input = QtWidgets.QTextEdit(self.centralwidget)
        self.query_input.setGeometry(QtCore.QRect(380, 220, 441, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.query_input.sizePolicy().hasHeightForWidth())
        self.query_input.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setItalic(False)
        self.query_input.setFont(font)
        self.query_input.setWhatsThis("")
        self.query_input.setPlaceholderText("")
        self.query_input.setObjectName("query_input")
        self.seqpool = QtWidgets.QTextEdit(self.centralwidget)
        self.seqpool.setGeometry(QtCore.QRect(380, 280, 441, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.seqpool.sizePolicy().hasHeightForWidth())
        self.seqpool.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setItalic(False)
        self.seqpool.setFont(font)
        self.seqpool.setWhatsThis("")
        self.seqpool.setPlaceholderText("")
        self.seqpool.setObjectName("seqpool")
        self.densitymapl = QtWidgets.QLabel(self.centralwidget)
        self.densitymapl.setGeometry(QtCore.QRect(240, 20, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(16)
        self.densitymapl.setFont(font)
        self.densitymapl.setObjectName("densitymapl")
        self.densitymap = QtWidgets.QTextEdit(self.centralwidget)
        self.densitymap.setGeometry(QtCore.QRect(380, 20, 441, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.densitymap.sizePolicy().hasHeightForWidth())
        self.densitymap.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setItalic(False)
        self.densitymap.setFont(font)
        self.densitymap.setWhatsThis("")
        self.densitymap.setObjectName("densitymap")
        self.SeqBuild = QtWidgets.QPushButton(self.centralwidget)
        self.SeqBuild.setGeometry(QtCore.QRect(30, 80, 181, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(18)
        self.SeqBuild.setFont(font)
        self.SeqBuild.setStyleSheet("background-color: rgb(115, 210, 22);")
        self.SeqBuild.setObjectName("SeqBuild")
        self.resolutionl = QtWidgets.QLabel(self.centralwidget)
        self.resolutionl.setGeometry(QtCore.QRect(210, 70, 171, 61))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(16)
        self.resolutionl.setFont(font)
        self.resolutionl.setAlignment(QtCore.Qt.AlignCenter)
        self.resolutionl.setObjectName("resolutionl")
        self.resolution = QtWidgets.QTextEdit(self.centralwidget)
        self.resolution.setGeometry(QtCore.QRect(380, 80, 91, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.resolution.sizePolicy().hasHeightForWidth())
        self.resolution.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setItalic(False)
        self.resolution.setFont(font)
        self.resolution.setWhatsThis("")
        self.resolution.setObjectName("resolution")
        self.densitymap_2 = QtWidgets.QToolButton(self.centralwidget)
        self.densitymap_2.setGeometry(QtCore.QRect(830, 20, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(14)
        self.densitymap_2.setFont(font)
        self.densitymap_2.setObjectName("densitymap_2")
        self.seqpool_2 = QtWidgets.QToolButton(self.centralwidget)
        self.seqpool_2.setGeometry(QtCore.QRect(830, 280, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(14)
        self.seqpool_2.setFont(font)
        self.seqpool_2.setObjectName("seqpool_2")
        self.query_input_2 = QtWidgets.QToolButton(self.centralwidget)
        self.query_input_2.setGeometry(QtCore.QRect(830, 220, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(14)
        self.query_input_2.setFont(font)
        self.query_input_2.setObjectName("query_input_2")
        self.errorbox = QtWidgets.QTextEdit(self.centralwidget)
        self.errorbox.setGeometry(QtCore.QRect(10, 700, 911, 121))
        font = QtGui.QFont()
        font.setFamily("Cantarell")
        font.setPointSize(15)
        self.errorbox.setFont(font)
        self.errorbox.setStyleSheet("color: rgb(255, 0, 0);")
        self.errorbox.setObjectName("errorbox")
        self.resolutionl_2 = QtWidgets.QLabel(self.centralwidget)
        self.resolutionl_2.setGeometry(QtCore.QRect(480, 80, 21, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(16)
        self.resolutionl_2.setFont(font)
        self.resolutionl_2.setObjectName("resolutionl_2")
        self.symmetryl = QtWidgets.QLabel(self.centralwidget)
        self.symmetryl.setGeometry(QtCore.QRect(620, 80, 101, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(16)
        self.symmetryl.setFont(font)
        self.symmetryl.setObjectName("symmetryl")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(10, 10, 911, 181))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setItalic(False)
        self.frame.setFont(font)
        self.frame.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setLineWidth(5)
        self.frame.setMidLineWidth(0)
        self.frame.setObjectName("frame")
        self.advanced_1 = QtWidgets.QTextEdit(self.frame)
        self.advanced_1.setGeometry(QtCore.QRect(370, 130, 441, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.advanced_1.sizePolicy().hasHeightForWidth())
        self.advanced_1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.advanced_1.setFont(font)
        self.advanced_1.setWhatsThis("")
        self.advanced_1.setObjectName("advanced_1")
        self.advancedl_1 = QtWidgets.QLabel(self.frame)
        self.advancedl_1.setGeometry(QtCore.QRect(250, 130, 91, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(16)
        self.advancedl_1.setFont(font)
        self.advancedl_1.setObjectName("advancedl_1")
        self.symmetry = QtWidgets.QTextEdit(self.frame)
        self.symmetry.setGeometry(QtCore.QRect(720, 70, 91, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.symmetry.sizePolicy().hasHeightForWidth())
        self.symmetry.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setItalic(False)
        self.symmetry.setFont(font)
        self.symmetry.setWhatsThis("")
        self.symmetry.setObjectName("symmetry")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(10, 210, 911, 181))
        self.frame_2.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setLineWidth(5)
        self.frame_2.setObjectName("frame_2")
        self.advancedl_2 = QtWidgets.QLabel(self.frame_2)
        self.advancedl_2.setGeometry(QtCore.QRect(260, 130, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(16)
        self.advancedl_2.setFont(font)
        self.advancedl_2.setObjectName("advancedl_2")
        self.advanced_2 = QtWidgets.QTextEdit(self.frame_2)
        self.advanced_2.setGeometry(QtCore.QRect(370, 130, 441, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.advanced_2.sizePolicy().hasHeightForWidth())
        self.advanced_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.advanced_2.setFont(font)
        self.advanced_2.setWhatsThis("")
        self.advanced_2.setObjectName("advanced_2")
        self.status = QtWidgets.QProgressBar(self.centralwidget)
        self.status.setEnabled(True)
        self.status.setGeometry(QtCore.QRect(260, 410, 561, 23))
        self.status.setAutoFillBackground(False)
        self.status.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.status.setMaximum(100)
        self.status.setProperty("value", 0)
        self.status.setTextVisible(True)
        self.status.setObjectName("status")
        self.abort = QtWidgets.QPushButton(self.centralwidget)
        self.abort.setEnabled(False)
        self.abort.setGeometry(QtCore.QRect(80, 400, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Liberation Serif")
        font.setPointSize(12)
        self.abort.setFont(font)
        self.abort.setStyleSheet("background-color: rgb(239, 41, 41);")
        self.abort.setObjectName("abort")
        self.frame.raise_()
        self.frame_2.raise_()
        self.seqpooll.raise_()
        self.Infobox.raise_()
        self.query_inputl.raise_()
        self.SeqSearch.raise_()
        self.query_input.raise_()
        self.seqpool.raise_()
        self.densitymapl.raise_()
        self.densitymap.raise_()
        self.SeqBuild.raise_()
        self.resolutionl.raise_()
        self.resolution.raise_()
        self.densitymap_2.raise_()
        self.seqpool_2.raise_()
        self.query_input_2.raise_()
        self.errorbox.raise_()
        self.resolutionl_2.raise_()
        self.symmetryl.raise_()
        self.status.raise_()
        self.abort.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 931, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "cryoID"))
        self.seqpooll.setText(_translate("MainWindow", "Protein\n"
"pool file"))
        self.Infobox.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Cantarell\'; font-size:15pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">stdout will go here</span></p></body></html>"))
        self.query_inputl.setText(_translate("MainWindow", "Query file"))
        self.SeqSearch.setToolTip(_translate("MainWindow", "<html><head/><body><p>Specify your query set file and your candidate protein pool file in the fields to the right, then click on this button to identify the candidate proteins that align best with your query sequences.</p></body></html>"))
        self.SeqSearch.setText(_translate("MainWindow", "Search pool"))
        self.query_input.setToolTip(_translate("MainWindow", "<html><head/><body><p>Input your latest user-updated query file (fasta or pdb format) here.</p></body></html>"))
        self.query_input.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Sans Serif\'; font-size:16pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Cantarell\';\"><br /></p></body></html>"))
        self.seqpool.setToolTip(_translate("MainWindow", "<html><head/><body><p>Input the candidate protein sequence pool file in fasta format. </p></body></html>"))
        self.seqpool.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Sans Serif\'; font-size:16pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Cantarell\';\"><br /></p></body></html>"))
        self.densitymapl.setText(_translate("MainWindow", "Density map"))
        self.densitymap.setToolTip(_translate("MainWindow", "<html><head/><body><p>Use the Browse button to the right to locate and select the cryoEM density map you would like to analyze. </p></body></html>"))
        self.densitymap.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Sans Serif\'; font-size:16pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Cantarell\';\"><br /></p></body></html>"))
        self.densitymap.setPlaceholderText(_translate("MainWindow", "your_cryoEM_map.mrc"))
        self.SeqBuild.setToolTip(_translate("MainWindow", "<html><head/><body><p>Specify your cryoEM density map, resolution limit, and symmetry in the fields to the right, then click on this button to generate query sequences from your chosen cryoEM map.</p></body></html>"))
        self.SeqBuild.setText(_translate("MainWindow", "Get queries"))
        self.resolutionl.setText(_translate("MainWindow", "High\n"
"resolution limit"))
        self.resolution.setToolTip(_translate("MainWindow", "<html><head/><body><p>Input the high resolution limit for map analysis here. The overall resolution reported for your cryoEM density map is a good starting point. You may then tune this parameter by adjusting the resolution limit and running the job again until you get enough good segments. </p></body></html>"))
        self.resolution.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Sans Serif\'; font-size:16pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Cantarell\';\"><br /></p></body></html>"))
        self.resolution.setPlaceholderText(_translate("MainWindow", "3.2"))
        self.densitymap_2.setText(_translate("MainWindow", "Browse"))
        self.seqpool_2.setText(_translate("MainWindow", "Browse"))
        self.query_input_2.setText(_translate("MainWindow", "Browse"))
        self.errorbox.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Cantarell\'; font-size:15pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:11pt;\">stderr will go here</span></p></body></html>"))
        self.resolutionl_2.setText(_translate("MainWindow", "Å"))
        self.symmetryl.setText(_translate("MainWindow", "Symmetry"))
        self.advanced_1.setToolTip(_translate("MainWindow", "<html><head/><body><p>option :: (default value) :: function description</p><p>-o :: (density map basename) :: set output basename</p><p>-n :: (10) :: set maximum number of queries to keep</p><p>-p :: (1) :: number of processors to use</p><p>-b :: (helices_strands) :: choose to build with helices_strands (quick), trace_and_build or a full model (takes more time)</p></body></html>"))
        self.advanced_1.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Sans Serif\'; font-size:16pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Cantarell\';\"><br /></p></body></html>"))
        self.advancedl_1.setText(_translate("MainWindow", "Options"))
        self.symmetry.setToolTip(_translate("MainWindow", "<html><head/><body><p>Input the symmetry applied during cryoEM density map reconstruction (e.g. C2, C3, I (icosahedral), T (tetrahedral), etc.). The default value is ANY, in which case cryoID will try all symmetries and use the highest symmetry found. </p></body></html>"))
        self.symmetry.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Sans Serif\'; font-size:16pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Cantarell\';\"><br /></p></body></html>"))
        self.symmetry.setPlaceholderText(_translate("MainWindow", "ANY"))
        self.advancedl_2.setText(_translate("MainWindow", "Options"))
        self.advanced_2.setToolTip(_translate("MainWindow", "<html><head/><body><p>option :: (default value) :: function description</p><p>-o :: (query file basename) :: set output basename</p><p>-l :: (1 10000) :: set candidate length range</p><p>-n :: (20) :: set maximum number of candidates to save</p><p>-e :: (1.0) :: set cutoff e-value for query blast search</p><p>-g :: (32767 32767) :: set penalty scores for gaps</p><p>-r :: (n/a) :: use this flag if the N/C terminal polarity of the query is not known</p><p>-v :: (n/a) :: use this flag to show simplified queries and all blast results for each query</p></body></html>"))
        self.advanced_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Sans Serif\'; font-size:16pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Cantarell\';\"><br /></p></body></html>"))
        self.status.setFormat(_translate("MainWindow", "status"))
        self.abort.setToolTip(_translate("MainWindow", "<html><head/><body><p>Abort the current job</p></body></html>"))
        self.abort.setText(_translate("MainWindow", "Abort"))




# GUI app
class  cryoIDWindow(QMainWindow):
    def __init__(self):
        super(QMainWindow, self).__init__()
        self.ui = cryoID_MainWindow()
        self.ui.setupUi(self)
        
        self.initUI()
        
    def initUI(self):
                
        # pop window to read the input file   
        self.ui.densitymap_2.clicked.connect(self.SelectDensitymap)
        
        self.ui.seqpool_2.clicked.connect(self.SelectSeqPool)  

        self.ui.query_input_2.clicked.connect(self.SelectQueryinput)
        
        # QProcess object for external programs
        self.process = QtCore.QProcess(self)
        
        # bound the script to the botton        
        self.ui.SeqBuild.clicked.connect(self.get_queries)
        
        self.ui.SeqSearch.clicked.connect(self.search_pool)      
        
        self.ui.abort.clicked.connect(self.abortjob)
                
        # QProcess emits readyRead when there is data to be read
        self.process.readyReadStandardOutput.connect(self.outputDisplay)        
        self.process.readyReadStandardError.connect(self.errorDisplay)
        
        self.process.errorOccurred.connect(self.processError)

        # set up the progress bar and abort button. one run at a time
        self.process.started.connect(lambda: self.ui.status.setMaximum(0))
        self.process.started.connect(lambda: self.ui.SeqBuild.setEnabled(False))
        self.process.started.connect(lambda: self.ui.SeqSearch.setEnabled(False))
        self.process.started.connect(lambda: self.ui.abort.setEnabled(True))
        
        self.process.finished.connect(lambda: self.ui.status.setMaximum(100))
        self.process.finished.connect(lambda: self.ui.SeqBuild.setEnabled(True))
        self.process.finished.connect(lambda: self.ui.SeqSearch.setEnabled(True))
        self.process.finished.connect(lambda: self.ui.abort.setEnabled(False))

        #self.show()
    
    # abort the running job
    def abortjob(self):
        
        # send terminate signal to subprogress
        self.process.terminate()
        #self.process.kill()
    
    
    # pop windows functions            
    def SelectDensitymap(self):
        
        try:
            fname = QFileDialog.getOpenFileName(self, 'Select file', '.', 'density map(*.mrc *.cpp4)')
            fname_rel = os.path.relpath(fname[0], os.getcwd())
            self.ui.densitymap.setText(fname_rel)
        except ValueError:
            self.ui.errorbox.setText('Please specify a file!')
            return -1
    
    def SelectSeqPool(self):
        
        try:
            fname = QFileDialog.getOpenFileName(self, 'Select file', '.', 'Protein pool file(*.fasta *.txt *.list)')
            fname_rel = os.path.relpath(fname[0], os.getcwd())
            self.ui.seqpool.setText(fname_rel)
        except ValueError:
            self.ui.errorbox.setText('Please specify a file!')
            return -1
    
    def SelectQueryinput(self):
        try:
            fname = QFileDialog.getOpenFileName(self, 'Select file', '.', 'query file(*.fasta *.pdb)')
            fname_rel = os.path.relpath(fname[0], os.getcwd())
            self.ui.query_input.setText(fname_rel)    
        except ValueError:
            self.ui.errorbox.setText('Please specify a file!')
            return -1
    
    # realtime display of output/error on GUI
    def outputDisplay(self):

        cursor = self.ui.Infobox.textCursor()
        cursor.movePosition(cursor.End)
        cursor.insertText(str(self.process.readAllStandardOutput()))
        
    def errorDisplay(self):
        
        cursor = self.ui.errorbox.textCursor()
        cursor.movePosition(cursor.End)
        cursor.insertText(str(self.process.readAllStandardError()))
    
    def processError(self):
        
        if self.process.error() == 0:
            self.ui.errorbox.setText('The process failed to start. Either the program is missing, or you may not have permissions to execute it')        
        #elif self.process.error() == 1:
            #self.ui.errorbox.setText('The program crashed')
        else:
            self.ui.errorbox.setText(str(self.process.errorString()))
        
    # bound to get_queries    
    def get_queries(self):
        
        self.ui.Infobox.clear()
        self.ui.errorbox.clear()
        
        densitymap = self.ui.densitymap.toPlainText()
        resolution = self.ui.resolution.toPlainText()
        symmetry = self.ui.symmetry.toPlainText()
        advanced = self.ui.advanced_1.toPlainText()
        
        # check if densitymap is provided
        if densitymap:
            get_queries_argu = ['-m', densitymap]       
        else:
            self.ui.errorbox.setText('Please input your densitymap first!')
            return -1
        
        # if resolution or symmetry not provided, use default value
        if resolution:
            get_queries_argu += ['-r', resolution]        
        if symmetry:
            get_queries_argu += ['-s', symmetry]
        
        # add advanced options
        if advanced:
            get_queries_argu += advanced.split()
        
        #if self.ui.command_button.isChecked():
            #print 'get_queries ' + ' '.join(get_queries_argu)
        
        self.process.start('get_queries', get_queries_argu)


    # bound to search_pool
    def search_pool(self):
        
        self.ui.Infobox.clear()
        self.ui.errorbox.clear()
        
        seqpool = self.ui.seqpool.toPlainText()
        query_file = self.ui.query_input.toPlainText()       
        #output = self.ui.search_output.toPlainText()
        advanced = self.ui.advanced_2.toPlainText()
        
        if not (seqpool and query_file):
            self.ui.errorbox.setText('Please input the query file/protein pool file first!')
            return -1
        
        #if not output:
            #output = 'final_list'
              
        search_pool_argu = ['-q', query_file, '-p', seqpool] #, '-o', output]
        
        # check whether do reverse too
        #if self.ui.search_reverse.isChecked():
        #    search_pool_argu.append('-r')
        
        # add advanced options
        if advanced:
            search_pool_argu += advanced.split()
            
        #if self.ui.command_button.isChecked():
            #print 'search_pool ' + ' '.join(search_pool_argu)
        
        self.process.start('search_pool', search_pool_argu)


#===========================================================================================
# read input arguments
def Parser():
    
    parser = argparse.ArgumentParser(description='cryoID (cryoEM proteomic structure identification) is a python-based program that determines the unique identity of the protein(s) in \
                                     (near-) atomic resolution cryoEM density maps from a pool of candidates. It takes cryoID two sequencial steps to get the job done, with two subprograms \
                                     called get_queries and search_pool respectively. This is cryoID Graphical User Interface (GUI).')
    parser.add_argument('-v', '--version', action='store_true', default=False, help='Show the cryoID version')
    
    params = parser.parse_args()

    return params


#==================================================================================================
if __name__ == "__main__":
    
    # read input arguments
    params = Parser()
    
    # Only show the version
    if params.version:
        print 'This is cryoID version 1.0.\nAuthor: Xiaorun Li @ Prof. Hong Zhou lab\nUniversity of California, Los Angeles (UCLA) &\nUniversity of Science and Technology of China (USTC)'        
    
    # Initialize the GUI
    else:
        
        cryoID_app = QApplication(sys.argv)        
        cryoID_GUI = cryoIDWindow()            
        cryoID_GUI.show()        
        sys.exit(cryoID_app.exec_())


